{"version":3,"sources":["components/DownloadLink.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["DownloadLink","props","url","showLink","href","className","download","parse","require","ObjectsToCsv","Home","useState","filename","setFilename","status","setStatus","setShowLink","setURL","useEffect","Spinner","animation","variant","readCSV","e","a","preventDefault","reader","FileReader","onload","text","target","result","replace","split","pop","keys","join","delimiter","columns","err","output","console","log","arr","map","r","push","MeasNo","Date","Time","Method","Value","Offset","Alpha","Temperature","Unit","csv","Blob","toString","blob","URL","createObjectURL","readAsText","files","Container","Card","Header","Body","InputGroup","FormControl","type","placeholder","size","value","onChange","match","csvInName","Text","id","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2UAQeA,EANM,SAAC,GAA8B,IAAD,IAA5BC,MAAQC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,SAChC,OACI,mBAAGC,KAAMF,EAAKG,UAAYF,EAAW,UAAY,SAAWG,SAAS,WAArE,uBCDFC,EAAQC,EAAQ,IAChBC,EAAeD,EAAQ,IA2GdE,EApGF,WACT,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,mBAAS,uBAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOR,EAAP,KAAiBa,EAAjB,KACA,EAAsBL,mBAAS,MAA/B,mBAAOT,EAAP,KAAYe,EAAZ,KAEAC,qBAAU,WACW,KAAbN,EACAG,EAAU,cAACI,EAAA,EAAD,CAASC,UAAU,SAASC,QAAQ,cACzCN,EAAU,uBAAwBC,GAAY,MACxD,CAACJ,EAAUV,IAEd,IAAMoB,EAAO,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sDACZD,EAAEE,kBACIC,EAAS,IAAIC,YACZC,OAAS,SAACL,GACb,IAAIM,EAAQN,EAAEO,OAAOC,QAGrBF,GADAA,GADAA,EAAOA,EAAKG,QAAQ,OAAQ,KAChBA,QAAQ,OAAQ,MAChBC,MAAM,SACb,GAAKJ,EAAK,GAAGI,MAAM,KACxBJ,EAAK,GAAGK,MACR,IAAMC,EAAON,EAAK,GAClBM,EAAK,IAAM,UACXA,EAAK,IAAM,SACXA,EAAK,IAAM,UACXA,EAAK,GAAK,SACVN,EAAK,GAAKA,EAAK,GAAGO,KAAK,KACvBP,EAAOA,EAAKO,KAAK,QACjB7B,EAAMsB,EAAM,CACRQ,UAAW,IACXC,QAASH,GAFR,uCAGF,WAAeI,EAAKC,GAApB,mBAAAhB,EAAA,0DACKe,EADL,gBAEKE,QAAQC,IAAIH,GAFjB,8BAISI,EAAM,GACVH,EAAOI,KAAI,SAACC,GACRF,EAAIG,KAAK,CACLC,OAAQF,EAAEE,OACVC,KAAMH,EAAEG,KACRC,KAAMJ,EAAEI,KACRC,OAAQL,EAAEK,OACV,YAAaL,EAAE,aACf,uBAAwBA,EAAE,wBAC1BM,MAAON,EAAEM,MACTC,OAAQP,EAAEO,OACVC,MAAOR,EAAEQ,MACTC,YAAaT,EAAES,YACfC,KAAMV,EAAEU,UAGVC,EAAM,IAAI/C,EAAakC,GApBlC,KAqBsBc,KArBtB,UAqB4CD,EAAIE,WArBhD,0BAqB4B,SArB5B,MAqBWC,EArBX,eAsBK1C,EAAO2C,IAAIC,gBAAgBF,IAC3B3C,GAAY,GAvBjB,4CAHE,0DA8BTU,EAAOoC,WAAWvC,EAAEO,OAAOiC,MAAM,IA/CrB,2CAAH,sDA2Db,OACI,cAACC,EAAA,EAAD,CAAW3D,UAAU,kCAArB,SACI,eAAC4D,EAAA,EAAD,CAAM5D,UAAU,mCAAhB,UACI,cAAC4D,EAAA,EAAKC,OAAN,CAAa7D,UAAU,KAAvB,wBACA,cAAC4D,EAAA,EAAKE,KAAN,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CACIC,KAAK,OACLC,YAAY,WACZ,aAAW,WACX,mBAAiB,eACjBC,KAAK,KACLC,MAAO7D,EACP8D,SAAU,SAACnD,IAtBlB,SAACA,GACd,GApEU,SAACX,GACf,QAAIA,EAAS+D,MAAM,mBAmEXC,CAAUrD,EAAEO,OAAO2C,OAAQ,CAC3B,IAAMA,EAAQlD,EAAEO,OAAO2C,MACvB5D,EAAY4D,GACZnD,EAAQC,QAELV,EAAY,IAiBK6D,CAASnD,MAIjB,cAAC6C,EAAA,EAAWS,KAAZ,CAAiBC,GAAG,eAApB,SACI,mBAAGzE,UAAU,iCAIzB,cAAC4D,EAAA,EAAKc,OAAN,CAAa1E,UAAU,0BAAvB,SAAmDF,EAAW,cAAC,EAAD,CAAcF,MAAO,CAAEE,WAAUD,SAAYY,UChG5GkE,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.90653e6f.chunk.js","sourcesContent":["import React from 'react';\n\nconst DownloadLink = ({props: {url, showLink}}) => {\n    return (\n        <a href={url} className={ showLink ? \"d-block\" : \"d-none\" } download=\"data.csv\">data.csv</a>\n    );\n}\n\nexport default DownloadLink","import React, { useState, useEffect } from 'react';\nimport { Container, Card, InputGroup, FormControl, Spinner } from \"react-bootstrap\";\nimport DownloadLink  from \"./DownloadLink\"\nconst parse = require('csv-parse')\nconst ObjectsToCsv = require('objects-to-csv');\n\nconst csvInName = (filename) => {\n    if (filename.match(/\\.[cC][sS][vV]$/)) { return true }\n    else { return false }\n}\n\nconst Home = () => {\n    const [filename, setFilename] = useState(\"\")\n    const [status, setStatus] = useState(\"Waiting for file...\")\n    const [showLink, setShowLink] = useState(false)\n    const [url, setURL] = useState(null)\n\n    useEffect(() => {\n        if (filename !== \"\") {\n            setStatus(<Spinner animation=\"border\" variant=\"warning\" />)\n        } else { setStatus(\"Waiting for file...\"); setShowLink(false)}\n    }, [filename, url])\n\n    const readCSV = async (e) => {\n        e.preventDefault()\n        const reader = new FileReader()\n        reader.onload = (e) => {\n            let text = (e.target.result)\n            text = text.replace(/[\"]/g, \"\")\n            text = text.replace(/[,]/g, \".\")\n            text = text.split(\"\\r\\n\")\n            text[0] = text[0].split(';')\n            text[0].pop()\n            const keys = text[0]\n            keys[11] = \"Value 2\"\n            keys[12] = \"Unit 2\"\n            keys[13] = \"Alpha 2\"\n            keys[7] = \"Unit 3\"\n            text[0] = text[0].join(\";\")\n            text = text.join(\"\\r\\n\")\n            parse(text, {\n                delimiter: \";\",\n                columns: keys,\n            }, async function(err, output){\n                if (err) {\n                    console.log(err)\n                } else {\n                    let arr = []\n                    output.map((r) => {\n                        arr.push({\n                            MeasNo: r.MeasNo,\n                            Date: r.Date,\n                            Time: r.Time,\n                            Method: r.Method,\n                            \"Sample ID\": r['Sample ID'],\n                            \"Measured Parameter 1\": r['Measured Parameter 1'],\n                            Value: r.Value,\n                            Offset: r.Offset,\n                            Alpha: r.Alpha,\n                            Temperature: r.Temperature,\n                            Unit: r.Unit,\n                        })\n                    })\n                    const csv = new ObjectsToCsv(arr)\n                    const blob = new Blob([\"\\ufeff\", await csv.toString()]);\n                    setURL(URL.createObjectURL(blob));\n                    setShowLink(true)\n                }\n            })\n        };\n        reader.readAsText(e.target.files[0])\n    }\n\n    const onChange = (e) => {\n        if (csvInName(e.target.value)) {\n            const value = e.target.value\n            setFilename(value)\n            readCSV(e)\n        }\n        else { setFilename(\"\")}\n    }\n\n    return (\n        <Container className=\"align-items-center h-100 d-flex\">\n            <Card className=\"col-6 offset-3 align-middle mb-5\">\n                <Card.Header className=\"h3\">Select CSV</Card.Header>\n                <Card.Body>\n                    <InputGroup>\n                        <FormControl\n                            type=\"File\"\n                            placeholder=\"Filename\"\n                            aria-label=\"Filename\"\n                            aria-describedby=\"basic-addon1\"\n                            size=\"lg\"\n                            value={filename}\n                            onChange={(e) => {\n                                onChange(e)\n                            }}\n                        />\n\n                        <InputGroup.Text id=\"basic-addon1\">\n                            <i className=\"fas fa-file-csv fa-2x\"></i>\n                        </InputGroup.Text>\n                    </InputGroup>\n                </Card.Body>\n                <Card.Footer className=\"d-flex flex-row-reverse\">{ showLink ? <DownloadLink props={{ showLink, url }} /> : status }</Card.Footer>\n            </Card>\n        </Container>\n    );\n}\n\nexport default Home","import './App.css';\nimport Home from './components/Home'\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}